#!/bin/bash
# Script to run system tests with Selenium service
#
# Usage:
#   ./bin/system-test                     # Run all system tests
#   ./bin/system-test spec/system/foo.rb  # Run specific test
#   ./bin/system-test --fail-fast         # Run with RSpec options
#   DEBUG=1 ./bin/system-test             # Run with debug mode

set -e

# Detect architecture
ARCH=$(uname -m)
COMPOSE_CMD="docker-compose"

if [[ "$ARCH" == "x86_64" ]] || [[ -n "$GITHUB_ACTIONS" ]]; then
  echo "üñ•Ô∏è  Detected x86_64 architecture"
  COMPOSE_CMD="docker-compose -f docker-compose.yml -f docker-compose.selenium-x86.yml"
else
  echo "üñ•Ô∏è  Detected ARM64 architecture"
fi

echo "üöÄ Starting required services..."
$COMPOSE_CMD up -d db redis elasticsearch selenium

echo "‚è≥ Waiting for database to be ready..."
# Wait up to 30 seconds for database
COUNTER=0
while [ $COUNTER -lt 30 ]; do
  if $COMPOSE_CMD exec -T db pg_isready -U docusphere >/dev/null 2>&1; then
    break
  fi
  sleep 1
  COUNTER=$((COUNTER + 1))
done

if [ $COUNTER -eq 30 ]; then
  echo "‚ùå Database failed to start within 30 seconds"
  exit 1
fi

echo "‚úÖ Database is ready!"

echo "‚è≥ Waiting for Selenium to be ready..."
# Wait up to 30 seconds for Selenium
COUNTER=0
while [ $COUNTER -lt 30 ]; do
  if curl -s http://localhost:4444/wd/hub/status 2>/dev/null | grep -q '"ready":\s*true'; then
    break
  fi
  sleep 1
  COUNTER=$((COUNTER + 1))
done

if [ $COUNTER -eq 30 ]; then
  echo "‚ùå Selenium failed to start within 30 seconds"
  exit 1
fi

echo "‚úÖ Selenium is ready!"

# Note: Capybara will start its own Rails server on port 3001 when needed
# No need to wait for it here, as it starts automatically with the first test

# Prepare test database if needed
echo "üì¶ Preparing test database..."
$COMPOSE_CMD run --rm \
  -e RAILS_ENV=test \
  web bundle exec rails db:prepare 2>/dev/null || \
$COMPOSE_CMD run --rm \
  -e RAILS_ENV=test \
  web bundle exec rails db:environment:set RAILS_ENV=test db:prepare

echo "üß™ Running system tests..."

# Default to all system tests if no arguments provided
TEST_ARGS="${@:-spec/system/}"

# Run tests with proper environment variables
# Use exec to run in existing web container for proper networking
if $COMPOSE_CMD ps web | grep -q "Up"; then
  echo "üì° Using existing web container..."
  $COMPOSE_CMD exec \
    -e RAILS_ENV=test \
    -e DOCKER_CONTAINER=true \
    web bundle exec rspec $TEST_ARGS
else
  echo "üì° Creating new test container..."
  $COMPOSE_CMD run --rm \
    -e RAILS_ENV=test \
    -e DOCKER_CONTAINER=true \
    web bundle exec rspec $TEST_ARGS
fi

TEST_RESULT=$?

if [ $TEST_RESULT -eq 0 ]; then
  echo "‚úÖ All tests passed!"
else
  echo "‚ùå Some tests failed"
fi

echo ""
echo "üí° Services are still running:"
echo "   - View Selenium browser: open http://localhost:7900"
echo "   - View Rails app: open http://localhost:3000"
echo "   - Stop all services: docker-compose down"
echo ""

exit $TEST_RESULT