#!/bin/bash

# DEPRECATED: Use ./bin/test ci instead
# This script is kept for backward compatibility

echo "⚠️  DEPRECATED: ./bin/pre-ci is deprecated"
echo "🚀  Use ./bin/test ci instead for better performance and features"
echo ""
echo "Migration guide:"
echo "  ./bin/pre-ci --fix        →  ./bin/test ci --fix"
echo "  ./bin/pre-ci --fast       →  ./bin/test ci --fast"
echo "  ./bin/pre-ci --verbose    →  ./bin/test ci --verbose"
echo ""
echo "Running ./bin/test ci $@ instead..."
echo ""

exec ./bin/test ci "$@"

set -e

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
FIX_MODE=false
FAST_MODE=false
VERBOSE=false
EXIT_CODE=0

# Parse arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --fix)
      FIX_MODE=true
      shift
      ;;
    --fast)
      FAST_MODE=true
      shift
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    -h|--help)
      echo "Usage: $0 [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  --fix      Attempt to auto-fix issues when possible"
      echo "  --fast     Skip slower tests (system tests)"
      echo "  --verbose  Show detailed output"
      echo "  --help     Show this help message"
      exit 0
      ;;
    *)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

# Utility functions
log_info() {
  echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
  echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
  EXIT_CODE=1
}

run_command() {
  local cmd="$1"
  local description="$2"
  local can_fix="$3"
  
  log_info "Running: $description"
  
  if [[ "$VERBOSE" == "true" ]]; then
    echo "Command: $cmd"
  fi
  
  if eval "$cmd"; then
    log_success "$description completed"
    return 0
  else
    local exit_code=$?
    log_error "$description failed (exit code: $exit_code)"
    
    if [[ "$can_fix" == "true" && "$FIX_MODE" == "true" ]]; then
      log_info "Attempting to auto-fix..."
      return 1
    fi
    
    return $exit_code
  fi
}

check_docker() {
  if ! docker --version &> /dev/null; then
    log_error "Docker is not installed or not running"
    return 1
  fi
  
  if ! docker-compose --version &> /dev/null; then
    log_error "Docker Compose is not installed"
    return 1
  fi
  
  log_success "Docker environment ready"
}

# Auto-fix functions
fix_rubocop() {
  log_info "Auto-fixing RuboCop issues..."
  docker-compose run --rm web bin/rubocop -A --fail-level error
}

fix_bundle_lock() {
  log_info "Adding x86_64-linux platform to Gemfile.lock..."
  docker-compose run --rm web bundle lock --add-platform x86_64-linux
}

fix_js_lint() {
  log_info "Auto-fixing JavaScript lint issues..."
  docker-compose run --rm web bun run lint:js --fix 2>/dev/null || true
}

fix_css_lint() {
  log_info "Auto-fixing CSS lint issues..."
  docker-compose run --rm web bun run lint:css --fix 2>/dev/null || true
}

# Test functions
run_security_scan_ruby() {
  log_info "🔍 Security Scan: Ruby (Brakeman + Bundle Audit)"
  
  # Brakeman security scan
  if ! run_command "docker-compose run --rm web bin/brakeman --no-pager --quiet" "Brakeman security scan"; then
    if [[ "$FIX_MODE" == "true" ]]; then
      log_warning "Brakeman issues found - manual review required"
    fi
  fi
  
  # Bundle audit
  if ! run_command "docker-compose run --rm web sh -c 'gem install bundler-audit && bundle-audit check --update'" "Bundle audit check"; then
    if [[ "$FIX_MODE" == "true" ]]; then
      log_info "Updating bundle to fix security vulnerabilities..."
      docker-compose run --rm web bundle update
    fi
  fi
}

run_security_scan_js() {
  log_info "🔍 Security Scan: JavaScript (Bun Audit)"
  
  if ! run_command "docker-compose run --rm web bun audit" "JavaScript security audit"; then
    if [[ "$FIX_MODE" == "true" ]]; then
      log_info "Updating JavaScript dependencies..."
      docker-compose run --rm web bun update
    fi
  fi
}

run_linting() {
  log_info "🔧 Code Linting"
  
  # Ruby linting
  if ! run_command "docker-compose run --rm web bin/rubocop -f github" "Ruby linting (RuboCop)" "true"; then
    if [[ "$FIX_MODE" == "true" ]]; then
      fix_rubocop
    fi
  fi
  
  # JavaScript linting
  if ! run_command "docker-compose run --rm web bun run lint:js" "JavaScript linting (ESLint)" "true"; then
    if [[ "$FIX_MODE" == "true" ]]; then
      fix_js_lint
    fi
  fi
  
  # CSS linting
  if ! run_command "docker-compose run --rm web bun run lint:css" "CSS linting (Stylelint)" "true"; then
    if [[ "$FIX_MODE" == "true" ]]; then
      fix_css_lint
    fi
  fi
}

setup_test_environment() {
  log_info "🏗️  Setting up test environment"
  
  # Build assets
  run_command "docker-compose run --rm web bun run build" "Building JavaScript assets"
  run_command "docker-compose run --rm web bun run build:css" "Building CSS assets"
  
  # Setup parallel test databases
  run_command "docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web sh -c 'bin/rails db:create && bin/rails db:schema:load'" "Setting up main test database"
  run_command "docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web bin/rails parallel:create" "Creating parallel test databases"
  run_command "docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web bin/rails parallel:load_schema" "Loading schema to parallel databases"
}

run_ruby_tests() {
  log_info "🧪 Ruby Tests (Main Application)"
  
  if [[ "$FAST_MODE" == "true" ]]; then
    # Run only unit tests in fast mode
    run_command "docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web bundle exec parallel_rspec spec/ --exclude-pattern 'spec/system/**/*_spec.rb' --format progress" "Ruby unit tests (parallel)"
  else
    # Run all non-system tests
    run_command "docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web bundle exec parallel_rspec spec/ --exclude-pattern 'spec/system/**/*_spec.rb' --format progress" "Ruby tests excluding system tests (parallel)"
  fi
}

run_engine_tests() {
  log_info "🧪 Engine Tests (Immo::Promo)"
  
  if [[ "$FAST_MODE" == "true" ]]; then
    # Run only unit tests in fast mode
    run_command "cd engines/immo_promo && docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web bundle exec parallel_rspec spec/ --exclude-pattern 'spec/system/**/*_spec.rb' --format progress" "Engine unit tests (parallel)"
  else
    # Run all non-system tests
    run_command "cd engines/immo_promo && docker-compose run --rm -e PARALLEL_TEST_PROCESSORS=4 web bundle exec parallel_rspec spec/ --exclude-pattern 'spec/system/**/*_spec.rb' --format progress" "Engine tests excluding system tests (parallel)"
  fi
}

run_system_tests() {
  if [[ "$FAST_MODE" == "true" ]]; then
    log_info "⚡ Skipping system tests (fast mode)"
    return 0
  fi
  
  log_info "🌐 System Tests (Browser Integration)"
  
  # Check if Selenium is running
  if ! docker-compose ps selenium 2>/dev/null | grep -q "Up"; then
    log_info "Starting Selenium service..."
    docker-compose up -d selenium
    sleep 10  # Wait for Selenium to be ready
  fi
  
  # Run main app system tests
  run_command "docker-compose run --rm -e SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub -e CAPYBARA_SERVER_HOST=0.0.0.0 web bundle exec rspec spec/system/ --format progress" "Main application system tests"
  
  # Run engine system tests
  run_command "cd engines/immo_promo && docker-compose run --rm -e SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub -e CAPYBARA_SERVER_HOST=0.0.0.0 web bundle exec rspec spec/system/ --format progress" "Engine system tests"
}

run_js_tests() {
  log_info "🧪 JavaScript Tests"
  
  run_command "docker-compose run --rm web bun test" "JavaScript tests"
}

check_platform_lock() {
  log_info "🔧 Checking Gemfile.lock platform"
  
  if ! grep -q "x86_64-linux" Gemfile.lock; then
    log_warning "x86_64-linux platform missing from Gemfile.lock"
    if [[ "$FIX_MODE" == "true" ]]; then
      fix_bundle_lock
    else
      log_error "Run with --fix to add x86_64-linux platform"
    fi
  else
    log_success "Gemfile.lock has correct platforms"
  fi
}

# Main execution
main() {
  echo "🚀 Pre-CI Validation Script"
  echo "=========================="
  echo "Fix mode: $FIX_MODE"
  echo "Fast mode: $FAST_MODE"
  echo "Verbose: $VERBOSE"
  echo ""
  
  # Pre-flight checks
  check_docker
  check_platform_lock
  
  # Phase 1: Security Scans
  echo ""
  echo "📋 Phase 1: Security Scans"
  echo "=========================="
  run_security_scan_ruby
  run_security_scan_js
  
  # Phase 2: Code Quality
  echo ""
  echo "📋 Phase 2: Code Quality & Linting"
  echo "=================================="
  run_linting
  
  # Phase 3: Test Environment Setup
  echo ""
  echo "📋 Phase 3: Test Environment Setup"
  echo "=================================="
  setup_test_environment
  
  # Phase 4: Test Execution
  echo ""
  echo "📋 Phase 4: Test Execution"
  echo "=========================="
  run_ruby_tests
  run_engine_tests
  run_js_tests
  
  # Phase 5: System Tests (if not in fast mode)
  echo ""
  echo "📋 Phase 5: System Tests"
  echo "========================"
  run_system_tests
  
  # Final summary
  echo ""
  echo "📊 Summary"
  echo "=========="
  
  if [[ $EXIT_CODE -eq 0 ]]; then
    log_success "All checks passed! Your code is ready for CI/CD 🎉"
    echo ""
    echo "Next steps:"
    echo "- Commit your changes: git add . && git commit -m 'Your commit message'"
    echo "- Push to trigger CI: git push"
  else
    log_error "Some checks failed. Please review the errors above."
    echo ""
    if [[ "$FIX_MODE" == "false" ]]; then
      echo "💡 Tip: Run with --fix to attempt automatic fixes"
    fi
    echo "🔧 Manual fixes may be required for some issues"
  fi
  
  exit $EXIT_CODE
}

# Run main function
main "$@"